unit TestScanAsmFile;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Constants, StrUtils, Classes, SysUtils, ScanAsmFile;

type
  // Test methods for class TScan

  TestTScan = class(TTestCase)
  strict private
    FScan: TScan;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetLongNameType;
    procedure TestBeginScan;
    procedure TestFindVar;
    procedure TestFindVarNameAndPath;
    procedure TestFindInclude;
    procedure TestClearList;
  end;
  // Test methods for class TMyStringList

  TestTMyStringList = class(TTestCase)
  strict private
    FMyStringList: TMyStringList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLoadFromFile;
  end;

implementation

procedure TestTScan.SetUp;
begin
  FScan := TScan.Create;
end;

procedure TestTScan.TearDown;
begin
  FScan.Free;
  FScan := nil;
end;

procedure TestTScan.TestGetLongNameType;
var
  ReturnValue: string;
  S: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FScan.GetLongNameType(S);
  // TODO: Validate method results
end;

procedure TestTScan.TestBeginScan;
var
  Include: PInclude;
  S: string;
begin
  // TODO: Setup method call parameters
  FScan.BeginScan(S, Include);
  // TODO: Validate method results
end;

procedure TestTScan.TestFindVar;
var
  IncPath: string;
  ProjectPath: string;
begin
  // TODO: Setup method call parameters
  FScan.FindVar(ProjectPath, IncPath);
  // TODO: Validate method results
end;

procedure TestTScan.TestFindVarNameAndPath;
var
  ReturnValue: TTokenKind;
  VarName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FScan.FindVarNameAndPath(VarName);
  // TODO: Validate method results
end;

procedure TestTScan.TestFindInclude;
var
  S: string;
begin
  // TODO: Setup method call parameters
  FScan.FindInclude(S);
  // TODO: Validate method results
end;

procedure TestTScan.TestClearList;
begin
  FScan.ClearList;
  // TODO: Validate method results
end;

procedure TestTMyStringList.SetUp;
begin
  FMyStringList := TMyStringList.Create;
end;

procedure TestTMyStringList.TearDown;
begin
  FMyStringList.Free;
  FMyStringList := nil;
end;

procedure TestTMyStringList.TestLoadFromFile;
var
  FileName: string;
begin
  // TODO: Setup method call parameters
  FMyStringList.LoadFromFile(FileName);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTScan.Suite);
  RegisterTest(TestTMyStringList.Suite);
end.

